#!/usr/bin/env perl

use strict;
use warnings;
use File::Basename 'basename';
use Config::Tiny;
use Getopt::Long;
use IO::Socket::UNIX;
use Time::HiRes;

my $prog = basename($0);
my $config = $ENV{HOME}."/.$prog";

sub usage {
    my $m = shift;
    print STDERR "$m\n\n" if $m;

    print STDERR "usage : $prog [-f config] [-i n] [-s socket] [-p] [-t] [-c channel] [-b] [message]\n";
    (my $cf = $config) =~ s/$ENV{HOME}/~/;
    print STDERR "config: $cf\n";
    exit 1;
}

GetOptions(
    'bot'        => \my $bot,
    'channel=s@' => \my @channels,
    'file=s'     => \$config,
    'interval=n' => \my $interval,
    'privmsg'    => \my $privmsg,
    'socket=s'   => \my $socket,
    'thru'       => \my $thru,
    ) or usage();

my $ini   = Config::Tiny->read($config);
usage(Config::Tiny->errstr) unless $ini;

$socket   ||= $ini->{_}{socket} or usage('socket not specified');
$socket     = chr(ord($socket)) eq '/' ? $socket : ('/tmp/tiarra-control/' . $socket);
$#channels < 0 and @channels = split(/,\s*/o, $ini->{_}{channel});
$#channels < 0 and usage('channel not specified');
my $notice  = $privmsg ? 'no' : 'yes';
$interval ||= $ini->{_}{interval} || 2;
my $message = join(' ', @ARGV) || join('', <STDIN>);
print $message if $thru;

my $protocol = 'TIARRACONTROL/1.0';
foreach my $channel (@channels) {
    my $TMPL = <<TMPL;
NOTIFY System::SendMessage $protocol\r
Sender: $prog\r
Notice: $notice\r
Channel: $channel\r
Charset: UTF-8\r
Text: %s\r
\r
TMPL
;

    my @lines = split("\n", $message);
    for my $idx (0 .. $#lines) {
	next unless $lines[$idx];

	my $sd = IO::Socket::UNIX->new(
	    Type => SOCK_STREAM,
	    Peer => $socket,
	    ) or die "$socket: $!";

	my $buf = sprintf($TMPL, $lines[$idx] . ($bot ? ' %' : ''));
	$sd->print($buf);
	my $resp = <$sd>;
	if ($resp !~ /$protocol 200 OK/o) {
	    warn $resp;
	}
	$sd->close;
	Time::HiRes::sleep($interval) if $idx != $#lines;
    }
}
